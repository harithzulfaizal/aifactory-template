from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional


class VectorDBBase(ABC):
    """Abstract base class for vector database implementations"""
    
    def __init__(self, config, embedding_service):
        self.config = config
        self.embedding_service = embedding_service
    
    @abstractmethod
    async def ingest_documents(self, documents: List[Dict[str, Any]]) -> bool:
        """Ingest documents into the vector database"""
        pass
    
    @abstractmethod
    async def search(
        self, 
        query: str, 
        top_k: int = 5, 
        filters: Optional[Dict[str, Any]] = None
    ) -> List[Dict[str, Any]]:
        """Search for similar documents"""
        pass
    
    @abstractmethod
    async def health_check(self) -> bool:
        """Check if the vector database is healthy"""
        pass
    
    @abstractmethod
    async def list_documents(self, limit: int = 100, offset: int = 0) -> List[Dict[str, Any]]:
        """List documents in the database"""
        pass
    
    @abstractmethod
    async def clear_documents(self) -> bool:
        """Clear all documents from the database"""
        pass
    
    @abstractmethod
    async def get_statistics(self) -> Dict[str, Any]:
        """Get database statistics"""
        pass
    
    async def _embed_chunks(self, chunks: List[str]) -> List[Dict[str, Any]]:
        """Helper method to embed chunks"""
        return await self.embedding_service.embed_document_chunks(chunks)
    
    def _prepare_document_for_ingestion(self, document: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Prepare document chunks for ingestion"""
        chunks = document.get('chunks', [])
        metadata = document.get('metadata', {})
        
        prepared_chunks = []
        for i, chunk in enumerate(chunks):
            chunk_data = {
                'content': chunk,
                'metadata': {
                    **metadata,
                    'chunk_index': i,
                    'document_id': document.get('filename', f'doc_{i}'),
                    'total_chunks': len(chunks)
                }
            }
            prepared_chunks.append(chunk_data)
        
        return prepared_chunks
