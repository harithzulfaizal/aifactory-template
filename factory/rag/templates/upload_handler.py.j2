import os
import asyncio
from typing import List, Dict, Any
from fastapi import UploadFile
import aiofiles
import tempfile

from ingestion.document_processor import DocumentProcessor
from vector_db.base import VectorDBBase


class UploadHandler:
    """Handles file upload and processing for document ingestion"""
    
    def __init__(self, document_processor: DocumentProcessor, vector_db: VectorDBBase):
        self.document_processor = document_processor
        self.vector_db = vector_db
    
    async def process_files(self, files: List[UploadFile], metadata_fields: List[Dict[str, Any]]):
        """Process uploaded files and ingest them into the vector database"""
        processed_documents = []
        
        for file in files:
            try:
                # Save file temporarily
                temp_file_path = await self._save_temp_file(file)
                
                try:
                    # Process document
                    document = await self.document_processor.process_document(
                        temp_file_path, 
                        file.filename,
                        metadata_fields
                    )
                    
                    if document:
                        processed_documents.append(document)
                        
                finally:
                    # Clean up temporary file
                    if os.path.exists(temp_file_path):
                        os.unlink(temp_file_path)
                        
            except Exception as e:
                print(f"Error processing file {file.filename}: {str(e)}")
                continue
        
        # Batch ingest documents
        if processed_documents:
            await self.vector_db.ingest_documents(processed_documents)
            print(f"Successfully ingested {len(processed_documents)} documents")
    
    async def _save_temp_file(self, file: UploadFile) -> str:
        """Save uploaded file to temporary location"""
        # Create temporary file
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file.filename.split('.')[-1]}") as temp_file:
            temp_file_path = temp_file.name
        
        # Write file content
        async with aiofiles.open(temp_file_path, 'wb') as temp_file:
            content = await file.read()
            await temp_file.write(content)
        
        return temp_file_path